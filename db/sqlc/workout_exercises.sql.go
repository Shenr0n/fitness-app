// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: workout_exercises.sql

package db

import (
	"context"
	"time"
)

const addExerciseToWorkout = `-- name: AddExerciseToWorkout :one
INSERT INTO workout_exercises (
    username,
    workout_id,
    exer_id,
    weights,
    sets,
    reps
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING we_id, username, workout_id, exer_id, weights, sets, reps, created_at
`

type AddExerciseToWorkoutParams struct {
	Username  string `json:"username"`
	WorkoutID int64  `json:"workout_id"`
	ExerID    int64  `json:"exer_id"`
	Weights   int32  `json:"weights"`
	Sets      int32  `json:"sets"`
	Reps      int32  `json:"reps"`
}

func (q *Queries) AddExerciseToWorkout(ctx context.Context, arg AddExerciseToWorkoutParams) (WorkoutExercise, error) {
	row := q.db.QueryRowContext(ctx, addExerciseToWorkout,
		arg.Username,
		arg.WorkoutID,
		arg.ExerID,
		arg.Weights,
		arg.Sets,
		arg.Reps,
	)
	var i WorkoutExercise
	err := row.Scan(
		&i.WeID,
		&i.Username,
		&i.WorkoutID,
		&i.ExerID,
		&i.Weights,
		&i.Sets,
		&i.Reps,
		&i.CreatedAt,
	)
	return i, err
}

const deleteExerciseInWE = `-- name: DeleteExerciseInWE :exec
DELETE FROM workout_exercises
WHERE username = $1
  AND exer_id = $2
`

type DeleteExerciseInWEParams struct {
	Username string `json:"username"`
	ExerID   int64  `json:"exer_id"`
}

func (q *Queries) DeleteExerciseInWE(ctx context.Context, arg DeleteExerciseInWEParams) error {
	_, err := q.db.ExecContext(ctx, deleteExerciseInWE, arg.Username, arg.ExerID)
	return err
}

const deleteExerciseInWorkoutWE = `-- name: DeleteExerciseInWorkoutWE :exec
DELETE FROM workout_exercises
WHERE username = $1
  AND workout_id = $2
  AND exer_id = $3
`

type DeleteExerciseInWorkoutWEParams struct {
	Username  string `json:"username"`
	WorkoutID int64  `json:"workout_id"`
	ExerID    int64  `json:"exer_id"`
}

func (q *Queries) DeleteExerciseInWorkoutWE(ctx context.Context, arg DeleteExerciseInWorkoutWEParams) error {
	_, err := q.db.ExecContext(ctx, deleteExerciseInWorkoutWE, arg.Username, arg.WorkoutID, arg.ExerID)
	return err
}

const deleteUserWorkoutExercises = `-- name: DeleteUserWorkoutExercises :exec
DELETE FROM workout_exercises
WHERE username = $1
`

func (q *Queries) DeleteUserWorkoutExercises(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUserWorkoutExercises, username)
	return err
}

const deleteWorkoutInWE = `-- name: DeleteWorkoutInWE :exec
DELETE FROM workout_exercises
WHERE username = $1
  AND workout_id = $2
`

type DeleteWorkoutInWEParams struct {
	Username  string `json:"username"`
	WorkoutID int64  `json:"workout_id"`
}

func (q *Queries) DeleteWorkoutInWE(ctx context.Context, arg DeleteWorkoutInWEParams) error {
	_, err := q.db.ExecContext(ctx, deleteWorkoutInWE, arg.Username, arg.WorkoutID)
	return err
}

const getWorkoutExercises = `-- name: GetWorkoutExercises :many
SELECT w.workout_id, w.username, w.workout_name, w.created_at, we.exer_id, e.exercise_name AS exercise_name, e.muscle_group AS muscle_group, we.weights, we.sets, we.reps
FROM workouts w
JOIN workout_exercises we ON w.workout_id = we.workout_id
JOIN exercises e ON we.exer_id = e.exer_id
WHERE w.username = $1
  AND w.workout_id = $2
ORDER BY we.exer_id
LIMIT $3 
OFFSET $4
`

type GetWorkoutExercisesParams struct {
	Username  string `json:"username"`
	WorkoutID int64  `json:"workout_id"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
}

type GetWorkoutExercisesRow struct {
	WorkoutID    int64     `json:"workout_id"`
	Username     string    `json:"username"`
	WorkoutName  string    `json:"workout_name"`
	CreatedAt    time.Time `json:"created_at"`
	ExerID       int64     `json:"exer_id"`
	ExerciseName string    `json:"exercise_name"`
	MuscleGroup  string    `json:"muscle_group"`
	Weights      int32     `json:"weights"`
	Sets         int32     `json:"sets"`
	Reps         int32     `json:"reps"`
}

func (q *Queries) GetWorkoutExercises(ctx context.Context, arg GetWorkoutExercisesParams) ([]GetWorkoutExercisesRow, error) {
	rows, err := q.db.QueryContext(ctx, getWorkoutExercises,
		arg.Username,
		arg.WorkoutID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetWorkoutExercisesRow{}
	for rows.Next() {
		var i GetWorkoutExercisesRow
		if err := rows.Scan(
			&i.WorkoutID,
			&i.Username,
			&i.WorkoutName,
			&i.CreatedAt,
			&i.ExerID,
			&i.ExerciseName,
			&i.MuscleGroup,
			&i.Weights,
			&i.Sets,
			&i.Reps,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
