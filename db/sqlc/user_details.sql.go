// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user_details.sql

package db

import (
	"context"
)

const getDietDetails = `-- name: GetDietDetails :one
SELECT age, weight, height, goal_weight, diet_pref, food_allergies, daily_cal_intake_goal FROM user_details
WHERE username = $1
`

type GetDietDetailsRow struct {
	Age                int32  `json:"age"`
	Weight             int32  `json:"weight"`
	Height             int32  `json:"height"`
	GoalWeight         int32  `json:"goal_weight"`
	DietPref           string `json:"diet_pref"`
	FoodAllergies      string `json:"food_allergies"`
	DailyCalIntakeGoal int32  `json:"daily_cal_intake_goal"`
}

func (q *Queries) GetDietDetails(ctx context.Context, username string) (GetDietDetailsRow, error) {
	row := q.db.QueryRowContext(ctx, getDietDetails, username)
	var i GetDietDetailsRow
	err := row.Scan(
		&i.Age,
		&i.Weight,
		&i.Height,
		&i.GoalWeight,
		&i.DietPref,
		&i.FoodAllergies,
		&i.DailyCalIntakeGoal,
	)
	return i, err
}

const getFitnessDetails = `-- name: GetFitnessDetails :one
SELECT age, weight, height, goal_weight, activity_level, current_fitness, fitness_goal FROM user_details
WHERE username = $1
`

type GetFitnessDetailsRow struct {
	Age            int32  `json:"age"`
	Weight         int32  `json:"weight"`
	Height         int32  `json:"height"`
	GoalWeight     int32  `json:"goal_weight"`
	ActivityLevel  string `json:"activity_level"`
	CurrentFitness string `json:"current_fitness"`
	FitnessGoal    string `json:"fitness_goal"`
}

func (q *Queries) GetFitnessDetails(ctx context.Context, username string) (GetFitnessDetailsRow, error) {
	row := q.db.QueryRowContext(ctx, getFitnessDetails, username)
	var i GetFitnessDetailsRow
	err := row.Scan(
		&i.Age,
		&i.Weight,
		&i.Height,
		&i.GoalWeight,
		&i.ActivityLevel,
		&i.CurrentFitness,
		&i.FitnessGoal,
	)
	return i, err
}

const recordDetails = `-- name: RecordDetails :one
INSERT into user_details (
    username,
    age,
    weight,
    height,
    goal_weight,
    diet_pref,
    food_allergies,
    daily_cal_intake_goal,
    activity_level,
    current_fitness,
    fitness_goal
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) 
RETURNING ud_id, username, age, weight, height, goal_weight, diet_pref, food_allergies, daily_cal_intake_goal, activity_level, current_fitness, fitness_goal, created_at
`

type RecordDetailsParams struct {
	Username           string `json:"username"`
	Age                int32  `json:"age"`
	Weight             int32  `json:"weight"`
	Height             int32  `json:"height"`
	GoalWeight         int32  `json:"goal_weight"`
	DietPref           string `json:"diet_pref"`
	FoodAllergies      string `json:"food_allergies"`
	DailyCalIntakeGoal int32  `json:"daily_cal_intake_goal"`
	ActivityLevel      string `json:"activity_level"`
	CurrentFitness     string `json:"current_fitness"`
	FitnessGoal        string `json:"fitness_goal"`
}

func (q *Queries) RecordDetails(ctx context.Context, arg RecordDetailsParams) (UserDetail, error) {
	row := q.db.QueryRowContext(ctx, recordDetails,
		arg.Username,
		arg.Age,
		arg.Weight,
		arg.Height,
		arg.GoalWeight,
		arg.DietPref,
		arg.FoodAllergies,
		arg.DailyCalIntakeGoal,
		arg.ActivityLevel,
		arg.CurrentFitness,
		arg.FitnessGoal,
	)
	var i UserDetail
	err := row.Scan(
		&i.UdID,
		&i.Username,
		&i.Age,
		&i.Weight,
		&i.Height,
		&i.GoalWeight,
		&i.DietPref,
		&i.FoodAllergies,
		&i.DailyCalIntakeGoal,
		&i.ActivityLevel,
		&i.CurrentFitness,
		&i.FitnessGoal,
		&i.CreatedAt,
	)
	return i, err
}
