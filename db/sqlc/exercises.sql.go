// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: exercises.sql

package db

import (
	"context"
)

const createExercise = `-- name: CreateExercise :one
INSERT INTO exercises (
    username,
    exercise_name,
    muscle_group
) VALUES (
    $1, $2, $3
)
RETURNING exer_id, username, exercise_name, muscle_group, created_at
`

type CreateExerciseParams struct {
	Username     string `json:"username"`
	ExerciseName string `json:"exercise_name"`
	MuscleGroup  string `json:"muscle_group"`
}

func (q *Queries) CreateExercise(ctx context.Context, arg CreateExerciseParams) (Exercise, error) {
	row := q.db.QueryRowContext(ctx, createExercise, arg.Username, arg.ExerciseName, arg.MuscleGroup)
	var i Exercise
	err := row.Scan(
		&i.ExerID,
		&i.Username,
		&i.ExerciseName,
		&i.MuscleGroup,
		&i.CreatedAt,
	)
	return i, err
}

const deleteExercise = `-- name: DeleteExercise :exec
DELETE FROM exercises
WHERE username = $1
	AND exer_id = $2
`

type DeleteExerciseParams struct {
	Username string `json:"username"`
	ExerID   int64  `json:"exer_id"`
}

func (q *Queries) DeleteExercise(ctx context.Context, arg DeleteExerciseParams) error {
	_, err := q.db.ExecContext(ctx, deleteExercise, arg.Username, arg.ExerID)
	return err
}

const deleteUserExercises = `-- name: DeleteUserExercises :exec
DELETE FROM exercises
WHERE username = $1
`

func (q *Queries) DeleteUserExercises(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUserExercises, username)
	return err
}

const getExercise = `-- name: GetExercise :one
SELECT exer_id, username, exercise_name, muscle_group, created_at FROM exercises
WHERE exer_id = $1
`

func (q *Queries) GetExercise(ctx context.Context, exerID int64) (Exercise, error) {
	row := q.db.QueryRowContext(ctx, getExercise, exerID)
	var i Exercise
	err := row.Scan(
		&i.ExerID,
		&i.Username,
		&i.ExerciseName,
		&i.MuscleGroup,
		&i.CreatedAt,
	)
	return i, err
}

const getExercises = `-- name: GetExercises :many
SELECT exer_id, username, exercise_name, muscle_group, created_at FROM exercises
WHERE username = $1 
ORDER BY exer_id 
LIMIT $2 
OFFSET $3
`

type GetExercisesParams struct {
	Username string `json:"username"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

func (q *Queries) GetExercises(ctx context.Context, arg GetExercisesParams) ([]Exercise, error) {
	rows, err := q.db.QueryContext(ctx, getExercises, arg.Username, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Exercise{}
	for rows.Next() {
		var i Exercise
		if err := rows.Scan(
			&i.ExerID,
			&i.Username,
			&i.ExerciseName,
			&i.MuscleGroup,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
