// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"
)

const addDefaultExercises = `-- name: AddDefaultExercises :exec
INSERT INTO exercises (username, exercise_name, muscle_group, created_at)
SELECT $1, exercise_name, muscle_group, NOW()
FROM default_exercises
`

func (q *Queries) AddDefaultExercises(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, addDefaultExercises, username)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,
  hashed_password,
  full_name,
  email,
  dob,
  weight,
  height
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING username, hashed_password, full_name, email, dob, weight, height, created_at
`

type CreateUserParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
	FullName       string `json:"full_name"`
	Email          string `json:"email"`
	Dob            string `json:"dob"`
	Weight         int32  `json:"weight"`
	Height         int32  `json:"height"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
		arg.Dob,
		arg.Weight,
		arg.Height,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Dob,
		&i.Weight,
		&i.Height,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE username = $1
`

func (q *Queries) DeleteUser(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, username)
	return err
}

const getUser = `-- name: GetUser :one
SELECT username, hashed_password, full_name, email, dob, weight, height, created_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Dob,
		&i.Weight,
		&i.Height,
		&i.CreatedAt,
	)
	return i, err
}

const updateHeight = `-- name: UpdateHeight :one
UPDATE users
SET 
height = $2
WHERE username = $1
RETURNING username, hashed_password, full_name, email, dob, weight, height, created_at
`

type UpdateHeightParams struct {
	Username string `json:"username"`
	Height   int32  `json:"height"`
}

func (q *Queries) UpdateHeight(ctx context.Context, arg UpdateHeightParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateHeight, arg.Username, arg.Height)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Dob,
		&i.Weight,
		&i.Height,
		&i.CreatedAt,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users
SET 
hashed_password = $2
WHERE username = $1
`

type UpdatePasswordParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.Username, arg.HashedPassword)
	return err
}

const updateWeight = `-- name: UpdateWeight :one
UPDATE users
SET 
weight = $2
WHERE username = $1
RETURNING username, hashed_password, full_name, email, dob, weight, height, created_at
`

type UpdateWeightParams struct {
	Username string `json:"username"`
	Weight   int32  `json:"weight"`
}

func (q *Queries) UpdateWeight(ctx context.Context, arg UpdateWeightParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateWeight, arg.Username, arg.Weight)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Dob,
		&i.Weight,
		&i.Height,
		&i.CreatedAt,
	)
	return i, err
}
