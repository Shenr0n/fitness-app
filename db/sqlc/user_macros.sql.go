// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user_macros.sql

package db

import (
	"context"
)

const deleteUserMacros = `-- name: DeleteUserMacros :exec
DELETE FROM user_macros
WHERE username = $1
`

func (q *Queries) DeleteUserMacros(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUserMacros, username)
	return err
}

const getMacro = `-- name: GetMacro :one
SELECT um_id, username, calories, fats, protein, carbs, um_date, created_at FROM user_macros 
WHERE username = $1
	AND um_date = $2
LIMIT $3 
OFFSET $4
`

type GetMacroParams struct {
	Username string `json:"username"`
	UmDate   string `json:"um_date"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

func (q *Queries) GetMacro(ctx context.Context, arg GetMacroParams) (UserMacro, error) {
	row := q.db.QueryRowContext(ctx, getMacro,
		arg.Username,
		arg.UmDate,
		arg.Limit,
		arg.Offset,
	)
	var i UserMacro
	err := row.Scan(
		&i.UmID,
		&i.Username,
		&i.Calories,
		&i.Fats,
		&i.Protein,
		&i.Carbs,
		&i.UmDate,
		&i.CreatedAt,
	)
	return i, err
}

const getMacros = `-- name: GetMacros :many
SELECT um_id, username, calories, fats, protein, carbs, um_date, created_at FROM user_macros 
WHERE username = $1 
ORDER BY um_id 
LIMIT $2 
OFFSET $3
`

type GetMacrosParams struct {
	Username string `json:"username"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

func (q *Queries) GetMacros(ctx context.Context, arg GetMacrosParams) ([]UserMacro, error) {
	rows, err := q.db.QueryContext(ctx, getMacros, arg.Username, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserMacro{}
	for rows.Next() {
		var i UserMacro
		if err := rows.Scan(
			&i.UmID,
			&i.Username,
			&i.Calories,
			&i.Fats,
			&i.Protein,
			&i.Carbs,
			&i.UmDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const recordMacros = `-- name: RecordMacros :one
INSERT into user_macros (
    username,
    calories,
    fats,
    protein,
    carbs,
    um_date
) VALUES (
    $1, $2, $3, $4, $5, $6
) 
RETURNING um_id, username, calories, fats, protein, carbs, um_date, created_at
`

type RecordMacrosParams struct {
	Username string `json:"username"`
	Calories int32  `json:"calories"`
	Fats     int32  `json:"fats"`
	Protein  int32  `json:"protein"`
	Carbs    int32  `json:"carbs"`
	UmDate   string `json:"um_date"`
}

func (q *Queries) RecordMacros(ctx context.Context, arg RecordMacrosParams) (UserMacro, error) {
	row := q.db.QueryRowContext(ctx, recordMacros,
		arg.Username,
		arg.Calories,
		arg.Fats,
		arg.Protein,
		arg.Carbs,
		arg.UmDate,
	)
	var i UserMacro
	err := row.Scan(
		&i.UmID,
		&i.Username,
		&i.Calories,
		&i.Fats,
		&i.Protein,
		&i.Carbs,
		&i.UmDate,
		&i.CreatedAt,
	)
	return i, err
}
