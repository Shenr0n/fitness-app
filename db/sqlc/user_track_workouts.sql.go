// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user_track_workouts.sql

package db

import (
	"context"
)

const deleteUserTrackWorkouts = `-- name: DeleteUserTrackWorkouts :exec
DELETE FROM user_track_workouts
WHERE username = $1
`

func (q *Queries) DeleteUserTrackWorkouts(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUserTrackWorkouts, username)
	return err
}

const getRecords = `-- name: GetRecords :many
SELECT workout_name, utw_date 
FROM user_track_workouts
WHERE username = $1
ORDER BY utw_date
LIMIT $2
OFFSET $3
`

type GetRecordsParams struct {
	Username string `json:"username"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

type GetRecordsRow struct {
	WorkoutName string `json:"workout_name"`
	UtwDate     string `json:"utw_date"`
}

func (q *Queries) GetRecords(ctx context.Context, arg GetRecordsParams) ([]GetRecordsRow, error) {
	rows, err := q.db.QueryContext(ctx, getRecords, arg.Username, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetRecordsRow{}
	for rows.Next() {
		var i GetRecordsRow
		if err := rows.Scan(&i.WorkoutName, &i.UtwDate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const recordWorkout = `-- name: RecordWorkout :one
INSERT into user_track_workouts (
    username,
    workout_id,
    workout_name,
    utw_date
) VALUES (
    $1, $2, $3, $4
) 
RETURNING utw_id, username, workout_id, workout_name, utw_date, created_at
`

type RecordWorkoutParams struct {
	Username    string `json:"username"`
	WorkoutID   int64  `json:"workout_id"`
	WorkoutName string `json:"workout_name"`
	UtwDate     string `json:"utw_date"`
}

func (q *Queries) RecordWorkout(ctx context.Context, arg RecordWorkoutParams) (UserTrackWorkout, error) {
	row := q.db.QueryRowContext(ctx, recordWorkout,
		arg.Username,
		arg.WorkoutID,
		arg.WorkoutName,
		arg.UtwDate,
	)
	var i UserTrackWorkout
	err := row.Scan(
		&i.UtwID,
		&i.Username,
		&i.WorkoutID,
		&i.WorkoutName,
		&i.UtwDate,
		&i.CreatedAt,
	)
	return i, err
}
