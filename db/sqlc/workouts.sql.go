// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: workouts.sql

package db

import (
	"context"
)

const createWorkout = `-- name: CreateWorkout :one
INSERT INTO workouts (
  username,
  workout_name
) VALUES (
  $1, $2
)
RETURNING workout_id, username, workout_name, created_at
`

type CreateWorkoutParams struct {
	Username    string `json:"username"`
	WorkoutName string `json:"workout_name"`
}

func (q *Queries) CreateWorkout(ctx context.Context, arg CreateWorkoutParams) (Workout, error) {
	row := q.db.QueryRowContext(ctx, createWorkout, arg.Username, arg.WorkoutName)
	var i Workout
	err := row.Scan(
		&i.WorkoutID,
		&i.Username,
		&i.WorkoutName,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUserWorkouts = `-- name: DeleteUserWorkouts :exec
DELETE FROM workouts
WHERE username = $1
`

func (q *Queries) DeleteUserWorkouts(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUserWorkouts, username)
	return err
}

const deleteWorkout = `-- name: DeleteWorkout :exec
DELETE FROM workouts
WHERE username = $1
  AND workout_id = $2
`

type DeleteWorkoutParams struct {
	Username  string `json:"username"`
	WorkoutID int64  `json:"workout_id"`
}

func (q *Queries) DeleteWorkout(ctx context.Context, arg DeleteWorkoutParams) error {
	_, err := q.db.ExecContext(ctx, deleteWorkout, arg.Username, arg.WorkoutID)
	return err
}

const getWorkout = `-- name: GetWorkout :one
SELECT workout_id, username, workout_name, created_at FROM workouts
WHERE workout_id = $1
`

func (q *Queries) GetWorkout(ctx context.Context, workoutID int64) (Workout, error) {
	row := q.db.QueryRowContext(ctx, getWorkout, workoutID)
	var i Workout
	err := row.Scan(
		&i.WorkoutID,
		&i.Username,
		&i.WorkoutName,
		&i.CreatedAt,
	)
	return i, err
}

const getWorkouts = `-- name: GetWorkouts :many
SELECT workout_id, username, workout_name, created_at FROM workouts
WHERE username = $1 
ORDER BY workout_id 
LIMIT $2 
OFFSET $3
`

type GetWorkoutsParams struct {
	Username string `json:"username"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

func (q *Queries) GetWorkouts(ctx context.Context, arg GetWorkoutsParams) ([]Workout, error) {
	rows, err := q.db.QueryContext(ctx, getWorkouts, arg.Username, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Workout{}
	for rows.Next() {
		var i Workout
		if err := rows.Scan(
			&i.WorkoutID,
			&i.Username,
			&i.WorkoutName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
